openapi: 3.0.3
info:
  title: Money Tracking
  description: A project to help track how one's money is being spent / moves around.
  version: alpha
externalDocs:
  url: https://github.com/MicahWW/Money-Tracking-Functions
  description: The GitHub repo for the project this is documenting
servers:
  - url: http://localhost:7071/api
tags:
  - name: Setup
    description: |
      A collection of functions that is meant for setting up the database / tables and inserting
      some temp data.
  - name: Upload Data
    description: A collection of functions used to upload new data.
  - name: Get Data
    description: A collection of functions used to get data stored in the database.

paths:
  /setup/database:
    put:
      operationId: setupDatabase
      summary: Creates the database.
      description: |
        If the database does not already exist it will create one defined by the environment
        variable `mysql-db`.
      tags:
        - Setup
      responses:
        '200':
          description: Database created.
  /setup/category:
    put:
      operationId: setupCategory
      summary: Creates the Categories table.
      description: |
        If the table does not already exist it will create on defined by the environment variable
        `table-categories`.
      tags:
        - Setup
      responses:
        '200':
          description: Table created.
  /setup/item:
    put:
      operationId: setupItem
      summary: Creates the Items table.
      description: |
        If the table does not already exist it will create on defined by the environment variable
        `table-expenseItems`.
      tags:
        - Setup
      responses:
        '200':
          description: Table created.
  /setup/location-cateogry:
    put:
      operationId: setupLocationCategory
      summary: Creates the Location Categories table.
      description: |
        If the table does not already exist it will create on defined by the environment variable
        `table-locationCategoryDefaults`.
      tags:
        - Setup
      responses:
        '200':
          description: Table created.
  /setup/location-name:
    put:
      operationId: setupLocationName
      summary: Creates the Location Name table.
      description: |
        If the table does not already exist it will create on defined by the environment variable
        `table-locationLongToShortName`.
      tags:
        - Setup
      responses:
        '200':
          description: Table created.
  /setup/temp-data:
    put:
      operationId: setupTempData
      summary: Will insert some data that is useful for quick debugging / development.
      description: |
        For the categories & locationNames tables some example data is uploaded for easy debugging
        and development of the program. If there is already data in one of tables it will skip over
        that specific one and do the other(s).
      tags:
        - Setup
      responses:
        '200':
          description: Data inserted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataInserted'
  /setup/full:
    put:
      operationId: setupFull
      summary: Calls all of the functions listed in this setup folder.
      description: |
        Runs all of the setup functions, inclusive of adding the example data, in the order that
        they should be run.
      tags:
        - Setup
      responses:
        '200':
          description: Database & tables created with example data inserted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataInserted'

  /items:
    get:
      operationId: getItems
      summary: Get all of the items in the database.
      tags:
        - Get Data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
    post:
      operationId: createNewItem(s)
      summary: Add new item(s)
      tags:
        - Upload Data
      requestBody:
        required: true
        description: Item(s) to upload
        content:
          # hasn't been implemented
          # application/json:
          #   schema:
          #     type: array
          #     items:
          #       $ref: '#/components/schemas/Item'
          text/csv:
            schema:
              example: |
                Transaction Date,Posted Date,Card No.,Description,Category,Debit,Credit
                1970-01-01,1970-01-01,123456789, Chipotle Store 0101, Dining, 9.90, 0
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: A count of the items uploaded
                    type: integer
                    example: 1

  /categories:
    get:
      operationId: getCategories
      summary: Get the listed categories
      tags:
        - Get Data
      parameters:
        - in: query
          name: id
          schema:
            type: integer
          description: The specific id to lookup
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
  /location-names:
    get:
      operationId: getLocationNames
      summary: Get all of the location names in the database.
      tags:
        - Get Data
      parameters:
        - in: query
          name: providerName
          schema:
            type: string
          description: The provider name match to lookup
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location_Name'
    post:
      operationId: createNewLocationName(s)
      summary: Add new location name(s)
      tags:
        - Upload Data
      parameters:
        - in: query
          name: overwrite
          schema:
            type: boolean
          description: If one of the given items is found in the database should it be overwritten with the new value, defaults to false.
      requestBody:
        required: true
        description: Name(s) to upload
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Location_Name'
          text/csv:
            schema:
              example: |
                Provider_Name,Short_Name
                Chipotle Store 0101, Chipotle
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  items_added:
                    $ref: '#/components/schemas/Location_Name_Upload_Result'
                  items_overwritten:
                    $ref: '#/components/schemas/Location_Name_Upload_Result'
                  items_skipped:
                    $ref: '#/components/schemas/Location_Name_Upload_Result'
  /location-categories:
    get:
      operationId: getLocationCategories
      summary: Get all of the location categories in the database.
      tags:
        - Get Data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location_Category'
  /all-tables:
    get:
      operationId: getAllTables
      summary: Gets data from all of the tables in the database in 1 call
      tags:
        - Get Data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/All_Tables'

  /visualize-spending:
    get:
      operationId: visualizeSpending
      summary: Get data in a format that works with the plotly visuals
      tags:
        - Get Data
      parameters:
        - in: query
          name: type
          description: The type of visual that the data will be put in.
          required: true
          schema:
            type: string
          examples:
            sunburst:
              summary: Get data for a sunburst chart
              value: sunburst
            pie:
              summary: Get data for a pie chart
              value: pie
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location_Category'
  /missing-location-names:
    get:
      operationId: missingLocationNames
      summary: Get a list of location names that are in the items table but not in the location names list
      tags:
        - Get Data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: Chipotle 0101

components:
  schemas:
    Item:
      description: A singular money item stored in the database
      required:
        - location
        - amount
        - category
        - transaction_date
      type: object
      properties:
        location:
          type: string
          example: Chipotle
        amount:
          type: number
          example: 9.90
        category:
          $ref: '#/components/schemas/Category'
        transaction_date:
          type: string
          example: "1970-01-01"
    Location_Name:
      description: A singular location name stored in the database
      required:
        - provider_name
        - name
      type: object
      properties:
        provider_name:
          type: string
          example: "Chipotle Store 0101"
        name:
          type: string
          example: Chipotle
    Location_Category:
      description: A singular location category stored in the database
      required:
        - location
        - category
      type: object
      properties:
        location:
          type: string
          example: Chipotle
        category:
          $ref: '#/components/schemas/Category'
    Category:
      description: A category from the list provided by the endpoint /categories
      required:
        - id
        - label
      type: object
      properties:
        id:
          type: integer
          example: 1
        label:
          type: string
          example: Dining
    DataInserted:
      type: object
      properties:
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        locationNames:
          type: array
          items:
            $ref: '#/components/schemas/Location_Name'
    Location_Name_Upload_Result:
      type: object
      properties:
        count:
          type: integer
          example: 1
        items:
          type: array
          items:
            $ref: "#/components/schemas/Location_Name"
    All_Tables:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        locationNames:
          type: array
          items:
            $ref: '#/components/schemas/Location_Name'
        locationCategories:
          type: array
          items:
            $ref: '#/components/schemas/Location_Category'
